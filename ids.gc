;	SEMICOLON
,	COMMA
:	COLON
=	EQUALS
(	INVOKE_OPEN
(	PAREN_OPEN
)	PAREN_CLOSE
[	SQUARE_OPEN
]	SQUARE_CLOSE
{	BRACE_OPEN
}	BRACE_CLOSE
.	DOT
<	LESS_THAN
>	GREATER_THAN
+	ADD
+	POSITIVE
-	SUBTRACT
-	NEGATIVE
*	MULTIPLY
*	DEREFERENCE
/	DIVIDE
%	MODULO
$	POLYMORPHIC
?	NOTE
@	REFER_INDEX
^	XOR_OP
^	REFERENCE
|	OR_OP
&	AND_OP
~	NOT_OP
!	NOT_BOOL
<=	LESS_EQUAL
>=	GREATER_EQUAL
+=	ADD_ASSIGN
-=	SUBTRACT_ASSIGN
*=	MULTIPLY_ASSIGN
/=	DIVIDE_ASSIGN
%=	MODULO_ASSIGN
^=	XOR_ASSIGN
|=	OR_ASSIGN
&=	AND_ASSIGN
!=	NOT_EQUAL
==	IS_EQUAL
if	IF
<|	LEFT_SHIFT
>|	RIGHT_SHIFT
<<	TEMPL_OPEN
>>	TEMPL_CLOSE
@@	REFER_BYTE
??	OTHERWISE
++	POSTFIX_INCREMENT	PLUSPLUS
++	PREFIX_INCREMENT	PLUSPLUS
--	POSTFIX_DECREMENT	MINUSMINUS
--	PREFIX_DECREMENT	MINUSMINUS
||	OR_BOOL
&&	AND_BOOL
/,	COMMA_OPTIONAL
i8	I8
u8	U8
var	VAR
for	FOR
abs	ABS
min	MIN
max	MAX
<|=	LEFT_SHIFT_ASSIGN
>|=	RIGHT_SHIFT_ASSIGN
int	INT
f16	F16
i16	I16
u16	U16
f32	F32
i32	I32
u32	U32
f64	F64
i64	I64
u64	U64
f80	F80
f128	F128
i128	I128
u128	U128
i256	I256
u256	U256
else	ELSE
case	CASE
goto	GOTO
func	FUNC
#asm	ASM
uint	UINT
char	CHAR
long	LONG
float	FLOAT
short	SHORT
uchar	UCHAR
ulong	ULONG
macro	MACRO
break	BREAK
#only	ONLY
double	DOUBLE
ushort	USHORT
return	RETURN
repeat	REPEAT
switch	SWITCH
inline	INLINE
module	MODULE
import	IMPORT
decide	DECIDE
#known	KNOWN
default	DEFAULT
bitcast	BITCAST
#import	COMP_IMPORT
continue	CONTINUE
#convention	CONVENTION
fallthrough	FALLTHROUGH
