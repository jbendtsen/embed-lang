module hello_linux;

int a = b * 9 + c / 8 % d - 7;

#only(#comptime)
func build() -> #Compilation {
    ?unused int meme;
    #Target t;
    [int] arr;
    t.name = "linux-minimal";
    t.entrypoint = linux_main;
    t.convention = {
        
    };
    t.generate = x64_codegen;
    t.assemble = x64_assemble;
    t.test[0] = "none";

    @ctx = #Compilation {};
    ctx.targets += t;
    return ctx;
}

#only(#comptime)
func x64_codegen(#Flex<u8> writer, [#String] tokens, #Ast ast) {
    
}

macro index_match([$T] array, $T elem) -> int {
    repeat array.count, @i {
        if array[i] == elem {
            return i;
        }
    }
    return -1;
}

#only(#comptime)
func x64_assemble(#Flex<u8> writer, [#String] words, [#Instruction] instructions) {
    @register_table = [#String] {
        "ax", "cx", "dx", "bx", "sp", "bp", "si", "di",
        "8", "9", "10", "11", "12", "13", "14", "15"
    };
    repeat ins.count, @i {
        ^Instruction ins = instructions @ i;
        @op = words[ins[i].parts[0]];
        if op == "mov" {
            @register = index_match(register_table, words[ins.parts[1]]);
            writer.add(byte(0xb8 + register), #le32bytes(#to_int(words[ins.parts[2]])));
        }
        else if op == "lea" {
            @dst_reg = index_match(register_table, words[ins.parts[1]]);
            @src_reg = index_match(register_table, words[ins.parts[2]]);
            writer.add(0x48, 0x8d, byte(0x05 + dst_reg * 8), #le32bytes(#to_int(words[ins[i].parts[3]])));
        }
        else if op == "syscall" {
            writer.add(0x0f, 0x05);
        }
    }
}

func linux_main() {
    @hello = "Hello World!\n";
    #asm {
        mov eax, 1 // write
        lea rcx, [rip + #rel_pc(call_write+1)]
        mov edi, 1 // stdout
        lea rsi, [rip + #rel_pc(hello.ptr)]
        mov edx, hello.bytecount
    call_write:
        syscall
        xor eax, eax
        leave
        ret
    }
}
