A programming language for embedded devices, GPUs, etc

- Complete control of the compiler's output
- Native language, ie. compiles to machine code (or whatever the programmer desires)
- Strongly typed
- Modules, no header files
- Heavy emphasis on metaprogramming
- No GC at runtime, by default
- No hidden allocations at runtime
- No hidden function calls
- Allocators as first-class objects
- Atomics and SIMD types as first-class citizens
- Variable-width pointers, variable-width integers and floats (including the default int and float)
- Certain types can be made illegal before run-time, eg. float if floating-point is not supported
- Multiple return values
- All functions must be able to be run at compile-time and at run-time, unless denoted otherwise (#only(#comptime) or #only(#runtime))
- Functions that use dynamic data structures must either have an allocator passed in or be marked as #only(#comptime)
- Every type of node in the AST must be defined by the user at compile-time in terms of its run-time equivalent
    - eg. arithmetic, branching, function calls (ABI)
    - compile-time libraries will help with this
- Defer {}, defer if cond {}
- inline keyword either at function definition or at call site to manually inline a particular function call
- User-defined null: boolean logic on pointers uses a comparison with the current definition of null
- Notes (basic)
- Only macros can use generic/polymorphic types, comptime-only objects (eg. #code), optional arguments, variadic argument list, etc.
- Macros take variables instead of values
- No overloading
- Functions can appear OOP-like with syntactic sugar (similar to Go, first parameter is a pointer to a struct)
- Complete control over struct padding, internal and external
- No automatic optimisation
    - Framework for optimisation based on AST patterns (to be determined how this will work)
- All function inlining is manual (where it's guaranteed if specified)
- Executable section layout
- Entrypoint function
    - Setup stack, setup interrupts, pre-initialise static variables, etc.
- Inline assembly
- Inject bytes as code (only inside macro, instantiated in function)
- Varargs and polymorphic types are only allowed in macros, not functions
- flags type, similar to enum
- #if and #else are obsolete, due to #known keyword as variable specifier
    - eg. if everything in an `if` is #known or literal, then it's a compile-time `if`
    - #known can be placed before `if` to throw an error if the condition is not #known
- /, operator to demarcate optional parameters in macros, ie. everything after /, is optional
- `for` instead of `while`
- Throw errors from metaprogram, ie. user-level compile errors
    - eg. if a note called ?foo is placed on an expression, but when generating code for that expression, a branch instruction is used, then throw an error

Constrain a function to only exist on 64-bit with:
    #only(#target.bits == 64)

